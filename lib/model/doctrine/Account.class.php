<?php

/**
 * Account
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    valueInvest
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Account extends BaseAccount
{
  public $amount;
  public $deposit;
  public function getDisplayName()
  {
    return ucfirst($this->getAgency()).": ****".substr($this->getNumber(),-4);
  }
  public function getSlug()
  {
    return substr($this->getNumber(), -2);
  }
  public function getDisplayNumber()
  {
    return "****".substr($this->getNumber(),-4);
  }
  public function getBalance()
  {
    return $this->getLatestTransaction()->balance;
  }
  /**
   * get the balance from transaction table by sum up all previous transactions
   */
  public function getBalanceByDate($date = null)
  {
    if(! $date) return $this->getBalance();
    $t = TransactionTable::getInstance()->createQuery('t')
              ->select('t.balance')
              ->orderBy('t.trade_date DESC')
              ->addOrderBy('t.id DESC')
              ->where('t.trade_date <= ?', date('Y-m-d',strtotime($date)))
              ->andWhere('t.account_id = ?', $this->id)
              ->fetchOne(array(), Doctrine::HYDRATE_SCALAR);
    return $t['t_balance'];
  }
  
  public function getMarketValue($date = null)
  {
    $transactions = $this->getLatestTransactions();
    $total = 0;
    foreach($transactions as $security_id => $transaction)
    {
      $price = $transaction->Security->LatestPrice;
      $price = $price->close;
      $quantity = $transaction->total_quantity;
      $value = $quantity*$price;
      $total += $value;
    }
    return $total;
  }
  /**
   * get the total Deposit from transaction table by sum up all previous deposit
   */
  public function getDeposit()
  {
    return $this->getLatestTransaction()->deposit;
  }
  public function getDepositByDate($date = null)
  {
    if(! $date) return $this->getDeposit();
    $t = TransactionTable::getInstance()->createQuery('t')
              ->select('t.deposit')
              ->orderBy('t.trade_date DESC')
              ->addOrderBy('t.id DESC')
              ->where('t.trade_date <= ?', date('Y-m-d',strtotime($date)))
              ->andWhere('t.account_id = ?', $this->id)
              ->fetchOne(array(), Doctrine::HYDRATE_SCALAR);
    return $t['t_deposit']; 
  }
  public function getLatestTransactions()
  {
    $securities = $this->getSecurities();
    $transactions = array();
    foreach($securities as $s)
    {
      $transaction = TransactionTable::getInstance()
                     ->createQuery('t')
                     ->where('t.account_id = ?', $this->id)
                     ->andWhere('t.security_id = ?', $s->id)
                     ->orderBy('t.trade_date DESC')
                     ->addOrderBy('t.id DESC')
                     ->fetchOne();
      $transactions[$s->id]=$transaction;
    }
    return $transactions;
  }
}
