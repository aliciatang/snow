<?php

/**
 * sfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    valueInvest
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser
{
  /**
   * get Accounts of the user which have records 
   * and compute the market value and gains for the latest date on record.
   * @return Array an array with key as account_id (or Total), 
   * and contains columns for 
   *         number: **** dd 
   *         account_type:
   *         mkt_value:
   *         balance:
   *         deposit:    
   */
  public function getAccounts()
  {
    $ret = Doctrine_Manager::getInstance()
          ->getCurrentConnection()
          ->fetchAll('SELECT m.`id`,`number`,`type`,`mkt_value`,`balance`,`deposit`,((mkt_value+balance)/deposit-1)*100 as `gain` 
                      FROM (SELECT a.`id`,a.`number`,a.`type`,SUM(sa.`quantity`*p.`cprice`) as `mkt_value` FROM `account_security` sa LEFT JOIN (`account` a, `price` p) on (a.`id`=sa.`account_id` && p.`security_id`=sa.`security_id`) WHERE sa.`security_id`>1 && a.user_id='.$this->getId().' && p.`date`=(select max(p2.`date`) FROM `price` p2 WHERE p.`security_id`=p2.`security_id`)  GROUP BY a.`id`) m 
                      LEFT JOIN (SELECT a.`id`,SUM(sa.`amount`) AS `balance`,SUM(sa.`sell_amount`) AS `deposit` FROM `account_security` sa LEFT JOIN `account` a on a.`id`=sa.`account_id` WHERE sa.`security_id`=1 && a.user_id='.$this->getId().' GROUP BY a.`id`) b 
                      ON b.`id`=m.`id`');
    $total = array();
    $total['number']    = 'Total';
    $total['type']      = 'ALL';
    $total['mkt_value'] = 0;
    $total['balance']   = 0;
    $total['deposit']   = 0;
    $accounts = array();
    foreach($ret as $key=>$a)
    {
      $a['number'] ='**** '.substr($a['number'],-2);
      $total['mkt_value'] += $a['mkt_value'];
      $total['deposit']   += $a['deposit'];
      $total['balance']   += $a['balance'];
      $accounts[$a['id']] = $a;
    }
    $total['gain'] = (($total['mkt_value']+$total['balance'])/$total['deposit']-1)*100;
    $accounts['total']=$total;
    return $accounts;
  }
  /**
   *
   */
  public function getSecurities( $state='current')
  {
    switch($state)
    {
      case 'current':
        $ret = Doctrine_Manager::getInstance()
              ->getCurrentConnection()
              ->fetchAll('SELECT s.`symbol`,SUM(sa.`quantity`) `quantity`, IF(SUM(sa.`buy_quantity`) > 0,SUM(sa.`buy_amount`)/SUM(sa.`buy_quantity`),0)*(-1) as `buy_price`,p.`cprice` as `sell_price`, (p.`cprice`/SUM(sa.`buy_amount`)*SUM(sa.`buy_quantity`)*(-1)-1)*100 as gain,SUM(sa.`quantity`)*p.`cprice` as mkt_value, SUM(sa.`dividend`) AS dividend, SUM(sa.`quantity`)*p.`cprice`+SUM(sa.`dividend`)+SUM(sa.`buy_amount`) AS total_gain FROM `account_security` sa LEFT JOIN (`security` s, `account` a, `price` p) ON s.id = sa.`security_id` && a.id=sa.`account_id` && p.`security_id`=s.id  WHERE sa.`quantity` >0 && sa.`security_id` > 1 && p.`date` = (select MAX(p2.`date`) FROM `price` p2 WHERE p2.`security_id`=p.`security_id`) && a.user_id='.$this->getId().' GROUP BY sa.`security_id` ORDER BY (SUM(sa.`quantity`)*p.`cprice` ) DESC');
        break;
      case 'history':
        $ret = Doctrine_Manager::getInstance()
              ->getCurrentConnection()
              ->fetchAll('SELECT s.`symbol`,SUM(sa.`buy_quantity`) `quantity`, IF(SUM(sa.`buy_quantity`) > 0,SUM(sa.`buy_amount`)/SUM(sa.`buy_quantity`),0)*(-1) AS `buy_price`, IF(SUM(sa.`sell_quantity`) < 0,SUM(sa.`sell_amount`)/SUM(sa.`sell_quantity`),0)*(-1) AS `sell_price`, (SUM(sa.`sell_amount`)/SUM(sa.`buy_amount`)*(-1)-1)*100 AS gain,SUM(sa.`sell_amount`) as mkt_value,SUM(sa.`dividend`) AS dividend, SUM(sa.`amount`) AS total_gain FROM `account_security` sa LEFT JOIN (`security` s, `account` a ) ON s.id = sa.`security_id` && a.id=sa.`account_id` WHERE sa.`quantity` =0 && sa.`security_id` > 1 && a.`user_id`='.$this->getId().' GROUP BY sa.`security_id`');
        break;
      default:
        break;
    }
    $total = array();
    $total['symbol']      = 'Total';
    $total['quantity']    = 0;
    $total['mkt_value']   = 0;
    $total['gain']        = 0;
    $total['dividend']    = 0;
    $total['buy_price']   = 0;
    $total['total_gain']  = 0 ;
    foreach($ret as $s)
    {
      $total['quantity']  += $s['quantity'];
      $total['mkt_value'] += isset($s['mkt_value'])?$s['mkt_value']:0;
      $total['gain']      += $s['gain'];
      $total['dividend']  += $s['dividend'];
      $total['buy_price'] += $s['quantity']*$s['buy_price'];
      $total['total_gain']+= $s['total_gain'];
    }
    $total['sell_price'] = $total['mkt_value']/$total['quantity'];
    $total['buy_price'] = $total['buy_price']/$total['quantity'];
    $ret[]=$total;
    return $ret;
  }
}
