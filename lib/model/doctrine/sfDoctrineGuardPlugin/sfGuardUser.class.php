<?php

/**
 * sfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    valueInvest
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser
{
  public function getAccountsWithTransactions()
  {
    $q = Doctrine_Query::create()
        ->from('Account a')
        ->leftJoin('a.Transactions t')
        ->orderBy('t.security_id,t.trade_date')
        ->where('a.user_id = ?', $this->getId())
        ;
    return $q->execute();
  }
  public function getAccountsWithSecurities()
  {
    $q = Doctrine_Query::create()
        ->from('Account a')
        ->leftJoin('a.Securities s')
        ->where('a.user_id = ?', $this->getId())
        ;
    return $q->execute();
  }
  public function getAccountsWithAccountSecurities()
  {
    $q = Doctrine_Query::create()
        ->from('Account a')
        ->leftJoin('a.AccountSecurities s')
        ->leftJoin('s.Security ss')
        ->where('a.user_id = ?', $this->getId())
        ->orderBy('a.id,s.quantity')
        ;
    $ret = $q->fetchArray();
    foreach($ret as $i=>$a)
    {
      $ret[$i]['amount'] = 0;
      $ret[$i]['number'] = "****".substr($a['number'],-4);
      foreach($a['AccountSecurities'] as $j=>$s)
      {
        $ret[$i]['amount'] += $s['buy_amount']+$s['sell_amount']+$s['other_amount'];
        $ret[$i]['AccountSecurities'][$j]['avg_buy_price']=(!$s['buy_quantity'])?0:(floatval($s['buy_amount'])/intval($s['buy_quantity']));
        $ret[$i]['AccountSecurities'][$j]['avg_sell_price']=(!$s['sell_quantity'])?0:(floatval($s['sell_amount'])/intval($s['sell_quantity']));
        if($s['security_id'] == '1')$ret[$i]['deposit'] = $s['other_amount'];
      }
    }
    return $ret;
  }
  public function getSecurities( $state='current')
  {
    $q = Doctrine_Query::create()
        ->select('s.symbol')
        ->addSelect('SUM(as.quantity) as quantity')
        ->addSelect('SUM(as.buy_quantity) as buy_quantity')        
        ->addSelect('SUM(as.sell_quantity)*(-1) as sell_quantity')
        ->addSelect('SUM(as.buy_amount)*(-1) as buy_amount')
        ->addSelect('SUM(as.sell_amount) as sell_amount')
        ->addSelect('SUM(as.sell_amount + as.buy_amount + as.other_amount) as amount')
        ->addSelect('SUM(as.other_amount) as dividend')
        ->from('Security s')
        ->leftJoin('s.AccountSecurities as')
        ->leftJoin('as.Account a')
        ->where('a.user_id = ? AND s.id > ?', array($this->getId(),1))
        ->groupBy('s.id')
        ->orderBy('gain DESC') 
        ;
    switch($state)
    {
      case 'current':
        $mq = Doctrine_Query::create()
              ->select('MAX(date) as max')
              ->from('Price p')
              ->leftJoin('p.Security s')
              ->where('s.market = ? OR s.market = ?',array('NYSE','NASDAQ'))
              ->fetchArray();
        $q->leftJoin('s.Price p')
          ->addSelect('p.cprice as cprice')
          ->addSelect('p.cprice*SUM(as.quantity) as mkt_value')
          ->addSelect('p.cprice*SUM(as.quantity)+SUM(as.sell_amount + as.buy_amount) as gain')
          ->having('quantity <> ?',0)
          ->andWhere('p.date = ?', $mq[0]["max"])
          ;
        break;
      case 'history':
        $q->having('quantity = ?', 0 )
          ->addSelect('SUM(as.sell_amount + as.buy_amount) as gain')
          ;
        break;
      default:
        break;
    }
    //var_dump($q->getSqlQuery());
    $ret = $q->fetchArray();
    $cash = Doctrine_Query::create()
            ->addSelect('SUM(as.sell_amount + as.buy_amount + as.other_amount) as amount')
            ->from('Account a')
            ->leftJoin('a.AccountSecurities as')
            ->leftJoin('as.Security s')
            ->where('a.user_id = ?', array($this->getId()))
            ->fetchArray();
    $cash=$cash[0];
    $cash['symbol'] = 'Cash';
    $cash['quantity']=$cash['amount'];
    $cash['mkt_value']=$cash['amount'];
    $cash['gain']=0;
    $cash['dividend']=0;
    $cash['buy_quantity'] = 1;
    $cash['sell_quantity'] = 1;
    $cash['buy_amount'] = 0;
    $cash['sell_amount'] = 0;
    $cash['cprice'] = 1;
    $ret[]=$cash;
    
    $total = array();
    $total['symbol'] = 'Total';
    $total['quantity'] = 0;
    $total['mkt_value'] = 0;
    $total['gain'] = 0;
    $total['dividend'] = 0;
    $total['amount'] = 0;
    $total['buy_quantity'] = 0;
    $total['sell_quantity'] = 0;
    $total['buy_amount'] = 0;
    $total['sell_amount'] = 0;
    foreach($ret as $s)
    {
      $total['quantity']      += $s['quantity'];
      $total['gain']          += $s['gain'];
      $total['dividend']      += $s['dividend'];
      $total['amount']        += $s['amount'];
      $total['buy_quantity']  += $s['buy_quantity'];
      $total['buy_amount']    += $s['buy_amount'];
      $total['sell_quantity'] += $s['sell_quantity'];
      $total['sell_amount']   += $s['sell_amount'];
      switch($state)
      {
        case 'current':
          $total['mkt_value'] += $s['mkt_value'];
          $total['cprice'] = $total['mkt_value']/$total['quantity'];
          break;
        case 'history':break;
      }
    }
    
    $ret[]=$total;
    return $ret;
  }
}
