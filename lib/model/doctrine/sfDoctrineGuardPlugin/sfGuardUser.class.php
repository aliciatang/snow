<?php

/**
 * sfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    valueInvest
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser
{
  public function getAccountsWithTransactions()
  {
    $q = Doctrine_Query::create()
        ->from('Account a')
        ->leftJoin('a.Transactions t')
        ->orderBy('t.security_id,t.trade_date')
        ->where('a.user_id = ?', $this->getId())
        ;
    return $q->execute();
  }
  public function getAccountsWithSecurities()
  {
    $q = Doctrine_Query::create()
        ->from('Account a')
        ->leftJoin('a.Securities s')
        ->where('a.user_id = ?', $this->getId())
        ;
    return $q->execute();
  }
  public function getAccountsWithCurrentHoldings()
  {
    $q = Doctrine_Query::create()
        ->select('a.number,a.type')
        ->addSelect('sum(t.quantity) as shares')
        ->addSelect('sum(t.amount)')
        ->from('Transaction t')
        ->leftJoin('t.Account a')
        ->leftJoin('t.Security s')
        ->leftJoin('s.Price p')
        ->where('a.user_id = ?', $this->getId())
        ->orderBy('a.id,s.quantity')
        ;
    $ret = $q->fetchArray();
    foreach($ret as $i=>$a)
    {
      $ret[$i]['amount'] = 0;
      $ret[$i]['number'] = "****".substr($a['number'],-4);
      foreach($a['AccountSecurities'] as $j=>$s)
      {
        $ret[$i]['amount'] += $s['amount'];
        $ret[$i]['AccountSecurities'][$j]['avg_buy_price']=(!$s['buy_quantity'])?0:(floatval($s['buy_amount'])/intval($s['buy_quantity']));
        $ret[$i]['AccountSecurities'][$j]['avg_sell_price']=(!$s['sell_quantity'])?0:(floatval($s['sell_amount'])/intval($s['sell_quantity']));
        if($s['security_id'] == '1')$ret[$i]['deposit'] = $s['sell_amount'];
      }
    }
    return $ret;
  }
  public function getSecurities( $state='current')
  {
    switch($state)
    {
      case 'current':
        $ret = Doctrine_Manager::getInstance()
              ->getCurrentConnection()
              ->fetchAll('SELECT s.`symbol`,SUM(sa.`quantity`) `quantity`, IF(SUM(sa.`buy_quantity`) > 0,SUM(sa.`buy_amount`)/SUM(sa.`buy_quantity`),0)*(-1) as `buy_price`,p.`cprice` as `sell_price`, (p.`cprice`/SUM(sa.`buy_amount`)*SUM(sa.`buy_quantity`)*(-1)-1)*100 as gain,SUM(sa.`quantity`)*p.`cprice` as mkt_value, SUM(sa.`dividend`) AS dividend, SUM(sa.`quantity`)*p.`cprice`+SUM(sa.`dividend`)-SUM(sa.`buy_amount`) AS total_gain FROM `account_security` sa LEFT JOIN (`security` s, `account` a, `price` p) ON s.id = sa.`security_id` && a.id=sa.`account_id` && p.`security_id`=s.id  WHERE sa.`quantity` >0 && sa.`security_id` > 1 && p.`date` = (select MAX(p2.`date`) FROM `price` p2 WHERE p2.`security_id`=p.`security_id`) GROUP BY sa.`security_id`');
        break;
      case 'history':
        $ret = Doctrine_Manager::getInstance()
              ->getCurrentConnection()
              ->fetchAll('SELECT s.`symbol`,SUM(sa.`buy_quantity`) `quantity`, IF(SUM(sa.`buy_quantity`) > 0,SUM(sa.`buy_amount`)/SUM(sa.`buy_quantity`),0)*(-1) AS `buy_price`, IF(SUM(sa.`sell_quantity`) < 0,SUM(sa.`sell_amount`)/SUM(sa.`sell_quantity`),0)*(-1) AS `sell_price`, (SUM(sa.`sell_amount`)/SUM(sa.`buy_amount`)*(-1)-1)*100 AS gain,SUM(sa.`sell_amount`) as mkt_value,SUM(sa.`dividend`) AS dividend, SUM(sa.`amount`) AS total_gain FROM `account_security` sa LEFT JOIN (`security` s, `account` a ) ON s.id = sa.`security_id` && a.id=sa.`account_id` WHERE sa.`quantity` =0 && sa.`security_id` > 1 GROUP BY sa.`security_id`');
        break;
      default:
        break;
    }
    $total = array();
    $total['symbol']      = 'Total';
    $total['quantity']    = 0;
    $total['mkt_value']   = 0;
    $total['gain']        = 0;
    $total['dividend']    = 0;
    $total['buy_price']   = 0;
    $total['total_gain']  = 0 ;
    foreach($ret as $s)
    {
      $total['quantity']  += $s['quantity'];
      $total['mkt_value'] += isset($s['mkt_value'])?$s['mkt_value']:0;
      $total['gain']      += $s['gain'];
      $total['dividend']  += $s['dividend'];
      $total['buy_price'] += $s['quantity']*$s['buy_price'];
      $total['total_gain']+= $s['total_gain'];
    }
    $total['sell_price'] = $total['mkt_value']/$total['quantity'];
    $total['buy_price'] = $total['buy_price']/$total['quantity'];
    $ret[]=$total;
    return $ret;
  }
}
